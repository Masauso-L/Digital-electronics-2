
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e2  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  00000c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000386  00000000  00000000  000012dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001664  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037b  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f0  00000000  00000000  00001a03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001df3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 */
int main(void)
{
    // Set pin as output in Data Direction Register
    // DDRB = DDRB or 0010 0000
    DDRB = DDRB | (1<<LED_GREEN);
  80:	25 9a       	sbi	0x04, 5	; 4
		PORTB = PORTB & ~(1<<LED_GREEN);
		_delay_ms(SHORT_DELAY);

        // Invert LED in Data Register
        // PORTB = PORTB xor 0010 0000
        PORTB = PORTB ^ (1<<LED_GREEN);
  82:	90 e2       	ldi	r25, 0x20	; 32
    // DE2 in Morse Code : 1001(D),10(E),111100(2)
    // Infinite loop
    while (1)
    {
        //Sending "D" : 1001
		PORTB |=(1<<LED_GREEN);                //The LED is set on to 1 (High) i.e first 1 in D
  84:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	33 ed       	ldi	r19, 0xD3	; 211
  8a:	80 e3       	ldi	r24, 0x30	; 48
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	30 40       	sbci	r19, 0x00	; 0
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0xc>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x16>
  96:	00 00       	nop
        _delay_ms(SHORT_DELAY);                //There is delayed for few ms i.e 1000ms pause before the next bit is sent
		PORTB = PORTB & ~(1<<LED_GREEN);       //The LED is reset to 0 (Low) i.e first 0 in D
  98:	2d 98       	cbi	0x05, 5	; 5
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	33 ed       	ldi	r19, 0xD3	; 211
  9e:	80 e3       	ldi	r24, 0x30	; 48
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2a>
  aa:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB & ~(1<<LED_GREEN);       // The LED is kept Low to send the Second 0 in D 
  ac:	2d 98       	cbi	0x05, 5	; 5
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	33 ed       	ldi	r19, 0xD3	; 211
  b2:	80 e3       	ldi	r24, 0x30	; 48
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	30 40       	sbci	r19, 0x00	; 0
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x34>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x3e>
  be:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB |=(1<<LED_GREEN);                // The LED is set on to send the last 1 in D 
  c0:	2d 9a       	sbi	0x05, 5	; 5
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	33 ed       	ldi	r19, 0xD3	; 211
  c6:	80 e3       	ldi	r24, 0x30	; 48
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x48>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x52>
  d2:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		
		PORTB = PORTB & ~(1<<LED_GREEN);      //Reset LED to low and wait for 2000ms before next character  i.e "E"       
  d4:	2d 98       	cbi	0x05, 5	; 5
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	37 ea       	ldi	r19, 0xA7	; 167
  da:	81 e6       	ldi	r24, 0x61	; 97
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	30 40       	sbci	r19, 0x00	; 0
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x5c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x66>
  e6:	00 00       	nop
		_delay_ms(LONG_DELAY);
		
		// Sending "E" : 10
		PORTB |=(1<<LED_GREEN);
  e8:	2d 9a       	sbi	0x05, 5	; 5
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	33 ed       	ldi	r19, 0xD3	; 211
  ee:	80 e3       	ldi	r24, 0x30	; 48
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x70>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x7a>
  fa:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB & ~(1<<LED_GREEN);
  fc:	2d 98       	cbi	0x05, 5	; 5
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	33 ed       	ldi	r19, 0xD3	; 211
 102:	80 e3       	ldi	r24, 0x30	; 48
 104:	21 50       	subi	r18, 0x01	; 1
 106:	30 40       	sbci	r19, 0x00	; 0
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x84>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x8e>
 10e:	00 00       	nop
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	37 ea       	ldi	r19, 0xA7	; 167
 114:	81 e6       	ldi	r24, 0x61	; 97
 116:	21 50       	subi	r18, 0x01	; 1
 118:	30 40       	sbci	r19, 0x00	; 0
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x96>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0xa0>
 120:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		
		_delay_ms(LONG_DELAY);                //The output is delayed further for 2000ms to wait for the next character i.e "2"
		
		//Sending "2" : 111100
		PORTB |=(1<<LED_GREEN);               //The LED is set on and stay on for 1000ms..this is repeated 4x to send 1111
 122:	2d 9a       	sbi	0x05, 5	; 5
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	33 ed       	ldi	r19, 0xD3	; 211
 128:	80 e3       	ldi	r24, 0x30	; 48
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	30 40       	sbci	r19, 0x00	; 0
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0xaa>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xb4>
 134:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB |=(1<<LED_GREEN);
 136:	2d 9a       	sbi	0x05, 5	; 5
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	33 ed       	ldi	r19, 0xD3	; 211
 13c:	80 e3       	ldi	r24, 0x30	; 48
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	30 40       	sbci	r19, 0x00	; 0
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0xbe>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0xc8>
 148:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB |=(1<<LED_GREEN);
 14a:	2d 9a       	sbi	0x05, 5	; 5
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	33 ed       	ldi	r19, 0xD3	; 211
 150:	80 e3       	ldi	r24, 0x30	; 48
 152:	21 50       	subi	r18, 0x01	; 1
 154:	30 40       	sbci	r19, 0x00	; 0
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0xd2>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0xdc>
 15c:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB |=(1<<LED_GREEN);
 15e:	2d 9a       	sbi	0x05, 5	; 5
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	33 ed       	ldi	r19, 0xD3	; 211
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	21 50       	subi	r18, 0x01	; 1
 168:	30 40       	sbci	r19, 0x00	; 0
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0xe6>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0xf0>
 170:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB & ~(1<<LED_GREEN);      //The LED is reset to Low and delayed for a few ms. this repeated 2x to send 00
 172:	2d 98       	cbi	0x05, 5	; 5
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	33 ed       	ldi	r19, 0xD3	; 211
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	30 40       	sbci	r19, 0x00	; 0
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0xfa>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x104>
 184:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB & ~(1<<LED_GREEN);
 186:	2d 98       	cbi	0x05, 5	; 5
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	33 ed       	ldi	r19, 0xD3	; 211
 18c:	80 e3       	ldi	r24, 0x30	; 48
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	30 40       	sbci	r19, 0x00	; 0
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x10e>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x118>
 198:	00 00       	nop
		_delay_ms(SHORT_DELAY);

        // Invert LED in Data Register
        // PORTB = PORTB xor 0010 0000
        PORTB = PORTB ^ (1<<LED_GREEN);
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	89 27       	eor	r24, r25
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	71 cf       	rjmp	.-286    	; 0x84 <main+0x4>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
